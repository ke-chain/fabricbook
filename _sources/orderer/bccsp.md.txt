# 获取 BCCSP :blockchain cryptographic service provider

## Fabric 中 BCCSP 用途是什么？
BCCSP（blockchain cryptographic service provider）：称之为区块链加密服务提供者，在Hyperledger Fabric中，BCCSP的主要作用是为Hyperledger Fabric提供加密、签名服务，包括如下：

- AES：一种分组加密实现算法，Hyperledger Fabric中主要用来对数据做加密解密处理。主要包含：AES128、AES192、AES256。
- ECDSA：一种椭圆曲线加密算法，Hyperledger Fabric中主要用于签名与验签。主要包含：ECDSAP256、ECDSAP384。
- RSA：一种非对称加密算法，是目前使用最广泛的公钥密码体制之一，Hyperledger Fabric中主要用于签名与验签。主要包含：RSA1024、RSA2048、RSA3072、RSA4096。
- HASH：哈希算法。主要包含：SHA256、SHA384、SHA3_256、SHA3_384。
- PKCS11：一套基于硬件的标准安全接口。
- HMAC： 密匙相关的哈希运算消息认证码

## BCCSP 底层调用了什么？
`factory.GetDefault()` 调用到最后获取的是 CSP 。
CSP 最终调用调用的 crypto 包下各种密码算法的实现。
CSP 是 BCCSP 接口的通用实现，进行密钥的生成、派生、导入、获取、签名、验签、加密、解密等一系列的操作。

```go


// orderer 包main函数，生成第一个BCCSP实例
func Main() {
    ...
    cryptoProvider := factory.GetDefault() // 获取默认的BCCSP
    ...
}

// bccsp 包的 默认工厂返回了SWFactory
func GetDefault() bccsp.BCCSP {
    ...
    bootBCCSP, err = (&SWFactory{}).Get(GetDefaultOpts())
    ... 
}
//  SWFactory 根据配置生成并配置CSP
func (f *SWFactory) Get(config *FactoryOpts) (bccsp.BCCSP, error) {
    return sw.NewWithParams(swOpts.SecLevel, swOpts.HashFamily, ks)
}

// SWFactory 根据配置生成并配置CSP
func NewWithParams(securityLevel int, hashFamily string, keyStore bccsp.KeyStore) (bccsp.BCCSP, error) {
    // 创建一个CSP实例
    swbccsp, err := New(keyStore)

   //************* 以下代码传入 crypto 包的密码算法实现  **************** //

	// Set the Encryptors 设置加密器
	swbccsp.AddWrapper(reflect.TypeOf(&aesPrivateKey{}), &aescbcpkcs7Encryptor{})

	// Set the Decryptors 设置解密器
	swbccsp.AddWrapper(reflect.TypeOf(&aesPrivateKey{}), &aescbcpkcs7Decryptor{})

	// Set the Signers 设置签名者
	swbccsp.AddWrapper(reflect.TypeOf(&ecdsaPrivateKey{}), &ecdsaSigner{})

	// Set the Verifiers 设置验证者
	swbccsp.AddWrapper(reflect.TypeOf(&ecdsaPrivateKey{}), &ecdsaPrivateKeyVerifier{})
	swbccsp.AddWrapper(reflect.TypeOf(&ecdsaPublicKey{}), &ecdsaPublicKeyKeyVerifier{})

	// Set the Hashers 设置hash算法
	swbccsp.AddWrapper(reflect.TypeOf(&bccsp.SHAOpts{}), &hasher{hash: conf.hashFunction})
	swbccsp.AddWrapper(reflect.TypeOf(&bccsp.SHA256Opts{}), &hasher{hash: sha256.New})
	swbccsp.AddWrapper(reflect.TypeOf(&bccsp.SHA384Opts{}), &hasher{hash: sha512.New384})
	swbccsp.AddWrapper(reflect.TypeOf(&bccsp.SHA3_256Opts{}), &hasher{hash: sha3.New256})
	swbccsp.AddWrapper(reflect.TypeOf(&bccsp.SHA3_384Opts{}), &hasher{hash: sha3.New384})

	// Set the key generators 设置秘钥生成器
	swbccsp.AddWrapper(reflect.TypeOf(&bccsp.ECDSAKeyGenOpts{}), &ecdsaKeyGenerator{curve: conf.ellipticCurve})
	swbccsp.AddWrapper(reflect.TypeOf(&bccsp.ECDSAP256KeyGenOpts{}), &ecdsaKeyGenerator{curve: elliptic.P256()})
	swbccsp.AddWrapper(reflect.TypeOf(&bccsp.ECDSAP384KeyGenOpts{}), &ecdsaKeyGenerator{curve: elliptic.P384()})
	swbccsp.AddWrapper(reflect.TypeOf(&bccsp.AESKeyGenOpts{}), &aesKeyGenerator{length: conf.aesBitLength})
	swbccsp.AddWrapper(reflect.TypeOf(&bccsp.AES256KeyGenOpts{}), &aesKeyGenerator{length: 32})
	swbccsp.AddWrapper(reflect.TypeOf(&bccsp.AES192KeyGenOpts{}), &aesKeyGenerator{length: 24})
	swbccsp.AddWrapper(reflect.TypeOf(&bccsp.AES128KeyGenOpts{}), &aesKeyGenerator{length: 16})

	// Set the key deriver 设置秘钥派生器
	swbccsp.AddWrapper(reflect.TypeOf(&ecdsaPrivateKey{}), &ecdsaPrivateKeyKeyDeriver{})
	swbccsp.AddWrapper(reflect.TypeOf(&ecdsaPublicKey{}), &ecdsaPublicKeyKeyDeriver{})
	swbccsp.AddWrapper(reflect.TypeOf(&aesPrivateKey{}), &aesPrivateKeyKeyDeriver{conf: conf})

	// Set the key importers 设置秘钥导入器
	swbccsp.AddWrapper(reflect.TypeOf(&bccsp.AES256ImportKeyOpts{}), &aes256ImportKeyOptsKeyImporter{})
	swbccsp.AddWrapper(reflect.TypeOf(&bccsp.HMACImportKeyOpts{}), &hmacImportKeyOptsKeyImporter{})
	swbccsp.AddWrapper(reflect.TypeOf(&bccsp.ECDSAPKIXPublicKeyImportOpts{}), &ecdsaPKIXPublicKeyImportOptsKeyImporter{})
	swbccsp.AddWrapper(reflect.TypeOf(&bccsp.ECDSAPrivateKeyImportOpts{}), &ecdsaPrivateKeyImportOptsKeyImporter{})
	swbccsp.AddWrapper(reflect.TypeOf(&bccsp.ECDSAGoPublicKeyImportOpts{}), &ecdsaGoPublicKeyImportOptsKeyImporter{})
	swbccsp.AddWrapper(reflect.TypeOf(&bccsp.X509PublicKeyImportOpts{}), &x509PublicKeyImportOptsKeyImporter{bccsp: swbccsp})

}


// 生成CSP函数代码
func New(keyStore bccsp.KeyStore) (*CSP, error) {
	csp := &CSP{keyStore,
		keyGenerators, keyDerivers, keyImporters, encryptors,
		decryptors, signers, verifiers, hashers}
}
```



## 重造BCCSP

目前只使用了CSP，故只需要完成CSP相关的代码即可。
将Hyperledger Fabric的SWFactory 和CSP代码加入工程。

```sh
$ make orderer
$ docker run -v $PWD/build/bin:/usr/local/bin  -it --rm hyperledger/fabric-orderer:2.2 /bin/sh
$ orderer
...
打印默认CPS配置
```



## 本文源码地址
3.0代码包含BCCSP和MSP的实现。
https://github.com/ke-chain/fabric/tree/v3.0

