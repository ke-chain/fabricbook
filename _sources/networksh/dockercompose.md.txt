docker-compose 启动peers and orderering service
========

## docker-compose的用途？
`docker-compose` 利用下载的 `docker images` 生成容器，容器包含 `peer` `orderering` 服务。

## 在network.sh的使用场景是什么？
`network.sh` 使用 `docker-compose` 根据 `docker/docker-compose-test-net.yaml` 文件启动`peer` `orderering` 服务:
```
IMAGE_TAG=latest docker-compose docker/docker-compose-test-net.yaml up -d 
```



## docker-compose 命令的效果是什么？
启动了三个docker容器
```sh
$ docker ps -a
CONTAINER ID        IMAGE                                                                                                                                                                   COMMAND                  CREATED             STATUS                     PORTS                              NAMES
180cd5126a28        hyperledger/fabric-peer:latest                                                                                                                                          "peer node start"        3 days ago          Up 5 seconds        7051/tcp, 0.0.0.0:9051->9051/tcp   peer0.org2.example.com
24dfcb651a16        hyperledger/fabric-peer:latest                                                                                                                                          "peer node start"        3 days ago          Up 5 seconds        0.0.0.0:7051->7051/tcp             peer0.org1.example.com
3b445e2592e0        hyperledger/fabric-orderer:latest                                                                                                                                       "orderer"                3 days ago          Up 5 seconds        0.0.0.0:7050->7050/tcp             orderer.example.com

```

## docker-compose 配置文件配置项的含义是什么？

**需要注意的是`service`下`volumes:`项，将证书目录和创世块文件挂载到了容器当中。**

配置文件为 `docker/docker-compose-test-net.yaml`:
```yaml
# 版本号
version: '2'

volumes:
  orderer.example.com:
  peer0.org1.example.com:
  peer0.org2.example.com:

networks:
  test:

services:

  orderer.example.com:
    container_name: orderer.example.com
    image: hyperledger/fabric-orderer:$IMAGE_TAG
    environment:
      - FABRIC_LOGGING_SPEC=INFO  # log level
      - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0 # 监听地址
      - ORDERER_GENERAL_LISTENPORT=7050 # 监听端口
      - ORDERER_GENERAL_GENESISMETHOD=file  # 创世块来源
      - ORDERER_GENERAL_GENESISFILE=/var/hyperledger/orderer/orderer.genesis.block # 创世块文件地址
      - ORDERER_GENERAL_LOCALMSPID=OrdererMSP # 所属组id
      - ORDERER_GENERAL_LOCALMSPDIR=/var/hyperledger/orderer/msp # msp文件件
      # enabled TLS
      - ORDERER_GENERAL_TLS_ENABLED=true # 使用tls加密
      - ORDERER_GENERAL_TLS_PRIVATEKEY=/var/hyperledger/orderer/tls/server.key #tls私钥
      - ORDERER_GENERAL_TLS_CERTIFICATE=/var/hyperledger/orderer/tls/server.crt # tls证书
      - ORDERER_GENERAL_TLS_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt] # tls根证书
      - ORDERER_KAFKA_TOPIC_REPLICATIONFACTOR=1
      - ORDERER_KAFKA_VERBOSE=true
      - ORDERER_GENERAL_CLUSTER_CLIENTCERTIFICATE=/var/hyperledger/orderer/tls/server.crt
      - ORDERER_GENERAL_CLUSTER_CLIENTPRIVATEKEY=/var/hyperledger/orderer/tls/server.key
      - ORDERER_GENERAL_CLUSTER_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric
    command: orderer
    volumes:
        - ../system-genesis-block/genesis.block:/var/hyperledger/orderer/orderer.genesis.block
        - ../organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp:/var/hyperledger/orderer/msp
        - ../organizations/ordererOrganizations/example.com/orderers/orderer.example.com/tls/:/var/hyperledger/orderer/tls
        - orderer.example.com:/var/hyperledger/production/orderer
    ports:
      - 7050:7050
    networks:
      - test

  peer0.org1.example.com:
    container_name: peer0.org1.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    environment:
      #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock # 套接字地址
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test # 属于哪个网络
      - FABRIC_LOGGING_SPEC=INFO
      #- FABRIC_LOGGING_SPEC=DEBUG
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_GOSSIP_USELEADERELECTION=true
      - CORE_PEER_GOSSIP_ORGLEADER=false
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      # Peer specific variabes
      - CORE_PEER_ID=peer0.org1.example.com # peer 节点名字
      - CORE_PEER_ADDRESS=peer0.org1.example.com:7051 # peer 节点地址
      - CORE_PEER_LISTENADDRESS=0.0.0.0:7051 # peer 节点监听地址
      - CORE_PEER_CHAINCODEADDRESS=peer0.org1.example.com:7052 # 链码地址
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:7052 # 链码监听地址
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer0.org1.example.com:7051 # 启动后向哪些节点发起gossip连接，以加入网络
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.org1.example.com:7051 # 节点背组织外感知的地址
      - CORE_PEER_LOCALMSPID=Org1MSP # 组id
    volumes:
        - /var/run/:/host/var/run/
        - ../organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/msp:/etc/hyperledger/fabric/msp
        - ../organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls:/etc/hyperledger/fabric/tls
        - peer0.org1.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - 7051:7051
    networks:
      - test

  peer0.org2.example.com:
    container_name: peer0.org2.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    environment:
      #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      #- FABRIC_LOGGING_SPEC=DEBUG
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_GOSSIP_USELEADERELECTION=true
      - CORE_PEER_GOSSIP_ORGLEADER=false
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      # Peer specific variabes
      - CORE_PEER_ID=peer0.org2.example.com
      - CORE_PEER_ADDRESS=peer0.org2.example.com:9051
      - CORE_PEER_LISTENADDRESS=0.0.0.0:9051
      - CORE_PEER_CHAINCODEADDRESS=peer0.org2.example.com:9052
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:9052
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.org2.example.com:9051
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer0.org2.example.com:9051
      - CORE_PEER_LOCALMSPID=Org2MSP
    volumes:
        - /var/run/:/host/var/run/
        - ../organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/msp:/etc/hyperledger/fabric/msp
        - ../organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls:/etc/hyperledger/fabric/tls
        - peer0.org2.example.com:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - 9051:9051
    networks:
      - test



```
